import os


def find_repeating_sequences(filename, sequence_length):
    sequences = {}

    with open(filename, "rb") as file:
        binary_data = file.read()

    binary_str = "".join(format(byte, "08b") for byte in binary_data)

    for i in range(len(binary_str) - sequence_length + 1):
        sequence = binary_str[i : i + sequence_length]
        if sequence in sequences:
            sequences[sequence] += 1
        else:
            sequences[sequence] = 1

    repeating_sequences = {k: v for k, v in sequences.items() if v > 1}

    repeating_sequences = sorted(
        repeating_sequences.items(), key=lambda x: x[1], reverse=True
    )

    return repeating_sequences


def list_binary_files(directory_path):
    try:
        file_list = os.listdir(directory_path)
        binary_files = [file for file in file_list if file.endswith(".bin")]
        return binary_files
    except FileNotFoundError:
        print("Directory not found.")
    except Exception as e:
        print(f"An error occurred: {e}")
    return []


# Usage example:
directory_path = r"D:\Repos\mw-detection-using-image\ml-sample-pack-small\benign\arm"  # Replace with the directory you want to list files from


def list_files_in_directory(directory):
    file_names = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_names.append(os.path.join(root, file))
    return file_names


file_list = list_files_in_directory(directory_path)

# Usage example:
file_path = file_list[0]
# print(file_path)
sequence_length = 1400  # Change this to the desired sequence length
repeating_seqs = find_repeating_sequences(file_path, sequence_length)

if repeating_seqs:
    print("Top 10 most repeated binary sequences:")
    for sequence, count in repeating_seqs[:10]:
        print(f"Sequence: {sequence}, Count: {count}")
else:
    print("No repeating sequences found in the file.")
