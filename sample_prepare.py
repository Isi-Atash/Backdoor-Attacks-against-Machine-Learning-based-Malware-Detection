import os
import numpy as np
from os import listdir

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

# provide path for malware and benign file directories
ben_path = [
    r"D:\Repos\mw-detection-using-image\data\original_data\benign",
    r"D:\Repos\mw-detection-using-image\data\backdoor_data\benign",
]
mal_path = [r"D:\Repos\mw-detection-using-image\data\original_data\malware"]

# objective size of image
h, w = 128, 128


# receives an array, processes averaging to resize the array and appends it to the image list.
def averaging(arr, append_arr, h, w):
    new_arr = []
    pool_size = max(1, len(arr) // (h * w))
    max_range = len(arr)
    pool_sum = 0
    for i in range(0, max_range, pool_size):
        if i + pool_size < max_range:
            pool_sum = sum(arr[i : i + pool_size])
            new_arr.append(np.uint8(pool_sum / pool_size))
        else:
            pool_sum = sum(arr[i:max_range])
            new_arr.append(np.uint8(pool_sum / (max_range - i)))
    if len(new_arr) < h * w:
        zeros_length = h * w - len(new_arr)
        img_arr_stacked = np.hstack((new_arr, np.zeros(zeros_length, dtype=np.uint8)))
        append_arr.append(img_arr_stacked)
    else:
        append_arr.append(new_arr[: h * w])


# receives the requested image size
# and the directory of the files, from which the samples are prepared.
def prepare_samples(paths, h, w):
    avgd_arr = []
    iteration = 0
    print("The samples are being prepared, please wait!")

    # Iterate over each folder in the collection
    for folder in paths:
        for root, dirs, files in os.walk(
            folder
        ):  # Use os.walk to iterate over all files in the folder
            for file in files:
                file_path = os.path.join(root, file)
                with open(file_path, "rb") as open_file:
                    data = open_file.read()
                    data_arr = np.frombuffer(
                        data, dtype=np.uint8
                    )  # reads the file bytes.
                    averaging(
                        data_arr, avgd_arr, h, w
                    )  # averages the array to the requested image size.
                    iteration += 1

    # Changing the dimensions appropriate for model input.
    samples_list = np.zeros(shape=(len(avgd_arr), h, w, 1), dtype=np.uint8)
    for i in range(len(avgd_arr)):
        samples_list[i, :, :, 0] = np.reshape(list(avgd_arr[i]), (h, w))

    print(f"Finished preparing {iteration} samples")
    return samples_list  # returns the image list.


# reads files and prepares samples.
ben_img_list = prepare_samples(ben_path, h, w)
mal_img_list = prepare_samples(mal_path, h, w)


# ensures the numbers of malware and non-malware images match.
if len(ben_img_list) > len(mal_img_list):
    ben_img_list = ben_img_list[0 : len(mal_img_list)]
else:
    mal_img_list = mal_img_list[0 : len(ben_img_list)]


# creates target values/data.
labels = [0 for _ in ben_img_list] + [1 for _ in mal_img_list]


# creates a final image list with both types of files.
train_img_list = np.vstack((ben_img_list, mal_img_list))
# further reshaping for model input.
train_img_list = train_img_list.astype("float32")
train_img_list /= 255


# saves the data in
np.save(
    r"D:\Repos\mw-detection-using-image\data\npy\img_list_poisoned_1.npy",
    train_img_list,
)
np.save(r"D:\Repos\mw-detection-using-image\data\npy\labels_poisoned_1.npy", labels)
